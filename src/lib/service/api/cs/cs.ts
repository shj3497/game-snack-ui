/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * 핀플로우 프로모션: API
 * 핀플로우 프로모션: API 문서
 * OpenAPI spec version: 1.0
 */
import {useMutation} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import type {CSRequest, EmptyResponse} from '.././model';

import {customAxios} from '../../custom-axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const createCS = (
  publicEventId: string,
  cSRequest: CSRequest,
  options?: SecondParameter<typeof customAxios>,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  formData.append('appId', cSRequest.appId);
  formData.append('clickKey', cSRequest.clickKey);
  if (cSRequest.userId !== undefined) {
    formData.append('userId', cSRequest.userId);
  }
  if (cSRequest.platform !== undefined) {
    formData.append('platform', cSRequest.platform);
  }
  if (cSRequest.adid !== undefined) {
    formData.append('adid', cSRequest.adid);
  }
  if (cSRequest.idfa !== undefined) {
    formData.append('idfa', cSRequest.idfa);
  }
  formData.append('question', cSRequest.question);
  formData.append('email', cSRequest.email);
  formData.append('inquireType', cSRequest.inquireType);
  cSRequest.files.forEach((value) => formData.append('files', value));

  return customAxios<EmptyResponse>(
    {
      url: `/api/cs/${publicEventId}/entry`,
      method: 'POST',
      headers: {'Content-Type': 'multipart/form-data'},
      data: formData,
      signal,
    },
    options,
  );
};

export const getCreateCSMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCS>>,
    TError,
    {publicEventId: string; data: CSRequest},
    TContext
  >;
  request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCS>>,
  TError,
  {publicEventId: string; data: CSRequest},
  TContext
> => {
  const mutationKey = ['createCS'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCS>>,
    {publicEventId: string; data: CSRequest}
  > = (props) => {
    const {publicEventId, data} = props ?? {};

    return createCS(publicEventId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type CreateCSMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCS>>
>;
export type CreateCSMutationBody = CSRequest;
export type CreateCSMutationError = unknown;

export const useCreateCS = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createCS>>,
      TError,
      {publicEventId: string; data: CSRequest},
      TContext
    >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createCS>>,
  TError,
  {publicEventId: string; data: CSRequest},
  TContext
> => {
  const mutationOptions = getCreateCSMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
