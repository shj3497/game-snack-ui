/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * 핀플로우 프로모션: API
 * 핀플로우 프로모션: API 문서
 * OpenAPI spec version: 1.0
 */
import {useQuery} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  ApiErrorResponse,
  CheckDuplicateEntryParams,
  EventListResponse,
} from '.././model';

import {customAxios} from '../../custom-axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary 앱 별 이벤트 중복 참여 체크
 */
export const checkDuplicateEntry = (
  appId: string,
  params: CheckDuplicateEntryParams,
  options?: SecondParameter<typeof customAxios>,
  signal?: AbortSignal,
) => {
  return customAxios<ApiErrorResponse>(
    {
      url: `/api/events/${appId}/duplicate-check`,
      method: 'GET',
      params,
      signal,
    },
    options,
  );
};

export const getCheckDuplicateEntryQueryKey = (
  appId: string,
  params: CheckDuplicateEntryParams,
) => {
  return [
    `/api/events/${appId}/duplicate-check`,
    ...(params ? [params] : []),
  ] as const;
};

export const getCheckDuplicateEntryQueryOptions = <
  TData = Awaited<ReturnType<typeof checkDuplicateEntry>>,
  TError = unknown,
>(
  appId: string,
  params: CheckDuplicateEntryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkDuplicateEntry>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxios>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCheckDuplicateEntryQueryKey(appId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof checkDuplicateEntry>>
  > = ({signal}) => checkDuplicateEntry(appId, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof checkDuplicateEntry>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type CheckDuplicateEntryQueryResult = NonNullable<
  Awaited<ReturnType<typeof checkDuplicateEntry>>
>;
export type CheckDuplicateEntryQueryError = unknown;

export function useCheckDuplicateEntry<
  TData = Awaited<ReturnType<typeof checkDuplicateEntry>>,
  TError = unknown,
>(
  appId: string,
  params: CheckDuplicateEntryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkDuplicateEntry>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkDuplicateEntry>>,
          TError,
          Awaited<ReturnType<typeof checkDuplicateEntry>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckDuplicateEntry<
  TData = Awaited<ReturnType<typeof checkDuplicateEntry>>,
  TError = unknown,
>(
  appId: string,
  params: CheckDuplicateEntryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkDuplicateEntry>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkDuplicateEntry>>,
          TError,
          Awaited<ReturnType<typeof checkDuplicateEntry>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useCheckDuplicateEntry<
  TData = Awaited<ReturnType<typeof checkDuplicateEntry>>,
  TError = unknown,
>(
  appId: string,
  params: CheckDuplicateEntryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkDuplicateEntry>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary 앱 별 이벤트 중복 참여 체크
 */

export function useCheckDuplicateEntry<
  TData = Awaited<ReturnType<typeof checkDuplicateEntry>>,
  TError = unknown,
>(
  appId: string,
  params: CheckDuplicateEntryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkDuplicateEntry>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCheckDuplicateEntryQueryOptions(
    appId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary 앱 별 이벤트 중복 참여 체크
 */
export const prefetchCheckDuplicateEntry = async <
  TData = Awaited<ReturnType<typeof checkDuplicateEntry>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  appId: string,
  params: CheckDuplicateEntryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkDuplicateEntry>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxios>;
  },
): Promise<QueryClient> => {
  const queryOptions = getCheckDuplicateEntryQueryOptions(
    appId,
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * 광고 매체사 지면에 미니게임 목록 제공을 위한 API
 * @summary 광고 매체 별 이벤트 목록 조회
 */
export const getEventList = (
  appId: string,
  options?: SecondParameter<typeof customAxios>,
  signal?: AbortSignal,
) => {
  return customAxios<EventListResponse>(
    {url: `/api/events/list/${appId}`, method: 'GET', signal},
    options,
  );
};

export const getGetEventListQueryKey = (appId: string) => {
  return [`/api/events/list/${appId}`] as const;
};

export const getGetEventListQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventList>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getEventList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxios>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventListQueryKey(appId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventList>>> = ({
    signal,
  }) => getEventList(appId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventList>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetEventListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventList>>
>;
export type GetEventListQueryError = unknown;

export function useGetEventList<
  TData = Awaited<ReturnType<typeof getEventList>>,
  TError = unknown,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getEventList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventList>>,
          TError,
          Awaited<ReturnType<typeof getEventList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventList<
  TData = Awaited<ReturnType<typeof getEventList>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getEventList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventList>>,
          TError,
          Awaited<ReturnType<typeof getEventList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetEventList<
  TData = Awaited<ReturnType<typeof getEventList>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getEventList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary 광고 매체 별 이벤트 목록 조회
 */

export function useGetEventList<
  TData = Awaited<ReturnType<typeof getEventList>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getEventList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetEventListQueryOptions(appId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary 광고 매체 별 이벤트 목록 조회
 */
export const prefetchGetEventList = async <
  TData = Awaited<ReturnType<typeof getEventList>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getEventList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxios>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetEventListQueryOptions(appId, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
